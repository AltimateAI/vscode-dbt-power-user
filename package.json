{
  "name": "vscode-dbt-power-user",
  "displayName": "dbt Power User",
  "description": "This extension makes vscode seamlessly work with dbt",
  "icon": "media/images/dbt.png",
  "publisher": "innoverio",
  "license": "MIT",
  "homepage": "https://github.com/innoverio/vscode-dbt-power-user",
  "repository": {
    "type": "git",
    "url": "https://github.com/innoverio/vscode-dbt-power-user.git"
  },
  "bugs": {
    "url": "https://github.com/innoverio/vscode-dbt-power-user/issues"
  },
  "version": "0.16.2",
  "engines": {
    "vscode": "^1.81.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "dbt",
    "sql",
    "jinja-sql"
  ],
  "activationEvents": [
    "workspaceContains:**/dbt_project.yml"
  ],
  "main": "./dist/extension",
  "contributes": {
    "snippets": [
      {
        "language": "jinja-sql",
        "path": "./snippets/snippets_sql.json"
      },
      {
        "language": "jinja-yaml",
        "path": "./snippets/snippets_yaml.json"
      },
      {
        "language": "jinja-md",
        "path": "./snippets/snippets_markdown.json"
      }
    ],
    "configuration": [
      {
        "title": "dbt Power User",
        "properties": {
          "dbt.dbtPythonPathOverride": {
            "type": "string",
            "description": "Path to a python executable or entrypoint. If undefined, we will use the Python extension's configured environment. Most users will not need to change this setting without specific reasoning such as custom wrappers and should instead modify the Python extensions selected interpreter."
          },
          "dbt.runModelCommandAdditionalParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Add additional params to the dbt run model command."
          },
          "dbt.buildModelCommandAdditionalParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Add additional params to the dbt build model command."
          },
          "dbt.profilesDirOverride": {
            "type": "string",
            "description": "Override the profiles dir for every dbt command. Absolute path or relative to the directory containing profiles.yml"
          },
          "dbt.targetPathOverride": {
            "type": "string",
            "description": "Override the target-path dir for every dbt command. Absolute path or relative to the directory containing manifest.json."
          },
          "dbt.queryLimit": {
            "type": "integer",
            "description": "The maximum number of rows the `Preview SQL Query` command returns.",
            "default": 500
          },
          "dbt.queryTemplate": {
            "type": "string",
            "description": "Override the default query template that is used by the `Preview SQL Query` command. Use this if your database has special syntax to limit query results",
            "default": "select * from ({query}\n) as query limit {limit}"
          },
          "dbt.queryScale": {
            "type": "string",
            "description": "Override the default scale of the result table that is used by the `Preview SQL Query` command.",
            "default": 1
          },
          "dbt.fileNameTemplateGenerateModel": {
            "type": "string",
            "enum": [
              "{prefix}_{sourceName}_{tableName}",
              "{prefix}_{sourceName}__{tableName}",
              "{prefix}_{tableName}",
              "{tableName}"
            ],
            "default": "{prefix}_{sourceName}_{tableName}",
            "description": "Set the naming template that is used when generating a model from a source yml file."
          },
          "dbt.prefixGenerateModel": {
            "type": "string",
            "default": "base",
            "description": "Set the prefix that is used when generating a model from a source yml file."
          },
          "dbt.versionCheck": {
            "type": "string",
            "enum": [
              "both",
              "status bar",
              "error message",
              "neither"
            ],
            "default": "both",
            "enumDescriptions": [
              "Show the outdated version message both in the status bar and as an error message popup.",
              "Show the outdated version message in the status bar, but not as an error message popup.",
              "Show the outdated version message as an error message popup, but not in the status bar.",
              "Do not show the outdated version message in the status bar or as an error message popup."
            ],
            "description": "This determines which messages will show when the dbt version is outdated."
          },
          "dbt.sqlFmtPath": {
            "type": "string",
            "description": "Path to `sqlfmt`. If not set, it will look on your PATH"
          },
          "dbt.sqlFmtAdditionalParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Add additional params to `sqlfmt`"
          }
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "dbt_view",
          "title": "dbt Power User",
          "icon": "./media/images/dbt_icon.svg",
          "contextualTitle": "dbt Power User"
        }
      ],
      "panel": [
        {
          "id": "dbt_preview_results",
          "title": "Query Results",
          "icon": "./media/images/dbt_icon.svg"
        },
        {
          "id": "dbt_lineage_view",
          "title": "Lineage View",
          "icon": "./media/images/dbt_icon.svg"
        }
      ]
    },
    "views": {
      "dbt_view": [
        {
          "id": "model_test_treeview",
          "name": "Model Tests"
        },
        {
          "id": "parent_model_treeview",
          "name": "Parent Models"
        },
        {
          "id": "children_model_treeview",
          "name": "Children Models"
        },
        {
          "id": "documentation_treeview",
          "name": "Documentation"
        }
      ],
      "dbt_preview_results": [
        {
          "id": "dbtPowerUser.PreviewResults",
          "name": "",
          "type": "webview"
        }
      ],
      "dbt_lineage_view": [
        {
          "id": "dbtPowerUser.ModelViewGraph",
          "name": "",
          "type": "webview"
        }
      ]
    },
    "commands": [
      {
        "command": "dbtPowerUser.runCurrentModel",
        "title": "Run dbt Model",
        "icon": {
          "light": "./media/images/run-light.svg",
          "dark": "./media/images/run-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.compileCurrentModel",
        "title": "Compile dbt Model",
        "icon": {
          "light": "./media/images/build_light.svg",
          "dark": "./media/images/build_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.sqlPreview",
        "title": "Compiled dbt Preview",
        "icon": "$(diff)"
      },
      {
        "command": "dbtPowerUser.runTest",
        "title": "Run Test",
        "icon": "$(pass)"
      },
      {
        "command": "dbtPowerUser.testCurrentModel",
        "title": "Test dbt Model",
        "icon": "$(pass)"
      },
      {
        "command": "dbtPowerUser.runChildrenModels",
        "title": "Run Downstream Models",
        "icon": "$(run-below)"
      },
      {
        "command": "dbtPowerUser.runParentModels",
        "title": "Run Upstream Models",
        "icon": "$(run-above)"
      },
      {
        "command": "dbtPowerUser.showRunSQL",
        "title": "Open dbt target folder run SQL",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.generateSchemaYML",
        "title": "Generate Documentation YML",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.generateDBTDocs",
        "title": "Run Dbt Docs Generate",
        "icon": {
          "light": "./media/images/run-light.svg",
          "dark": "./media/images/run-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.showCompiledSQL",
        "title": "Open dbt target folder compiled SQL",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.executeSQL",
        "title": "Execute dbt SQL",
        "icon": "$(play)"
      },
      {
        "command": "dbtPowerUser.buildCurrentModel",
        "title": "Build dbt Model",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      }
    ],
    "keybindings": [
      {
        "key": "Ctrl+Enter",
        "mac": "Cmd+Enter",
        "command": "dbtPowerUser.executeSQL",
        "when": "editorFocus && resourceLangId =~ /^sql$|^jinja-sql$/"
      },
      {
        "key": "Ctrl+'",
        "mac": "Cmd+'",
        "command": "dbtPowerUser.sqlPreview"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "dbtPowerUser.executeSQL",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@1"
        },
        {
          "command": "dbtPowerUser.buildCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@2"
        },
        {
          "command": "dbtPowerUser.runCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@3"
        },
        {
          "command": "dbtPowerUser.testCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@4"
        },
        {
          "command": "dbtPowerUser.sqlPreview",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@5"
        }
      ],
      "editor/context": [
        {
          "command": "dbtPowerUser.showCompiledSQL",
          "group": "dbt@4",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.showRunSQL",
          "group": "dbt@5",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.generateSchemaYML",
          "group": "dbt@6",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.testCurrentModel",
          "group": "dbt@2",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.runCurrentModel",
          "group": "dbt@1",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.compileCurrentModel",
          "group": "dbt@3",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        }
      ],
      "view/title": [
        {
          "command": "dbtPowerUser.testCurrentModel",
          "when": "view == model_test_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.runChildrenModels",
          "when": "view == children_model_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.runParentModels",
          "when": "view == parent_model_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.generateDBTDocs",
          "when": "view == documentation_treeview",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "dbtPowerUser.runTest",
          "when": "view == model_test_treeview && viewItem != source",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.runChildrenModels",
          "when": "view == children_model_treeview && viewItem != source",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.runParentModels",
          "when": "view == parent_model_treeview && viewItem != source",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.generateSchemaYML",
          "when": "view == documentation_treeview",
          "group": "inline"
        }
      ]
    },
    "languages": [
      {
        "id": "jinja-sql",
        "icon": {
          "light": "./media/images/dbt_file_icon.svg",
          "dark": "./media/images/dbt_file_icon.svg"
        }
      }
    ]
  },
  "scripts": {
    "prepare": "husky install",
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch",
    "test-compile": "tsc -p ./",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "deploy-vscode": "vsce publish",
    "build-vsix": "vsce package",
    "deploy-openvsx": "ovsx publish"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^18.15.11",
    "@types/vscode": "^1.81.0",
    "@types/which": "^3.0.0",
    "@typescript-eslint/eslint-plugin": "^5.54.1",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.3.4",
    "copy-webpack-plugin": "^11.0.0",
    "eslint": "^8.47.0",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-prettier": "^5.0.0",
    "file-loader": "^6.1.0",
    "glob": "^10.3.3",
    "husky": "^8.0.3",
    "lint-staged": "^14.0.1",
    "mocha": "^10.2.0",
    "ovsx": "^0.8.3",
    "prettier": "^3.0.2",
    "prettier-eslint": "^15.0.1",
    "prettier-plugin-organize-imports": "^3.2.3",
    "terser-webpack-plugin": "^5.3.9",
    "ts-loader": "^9.4.4",
    "typescript": "^4.9.5",
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4"
  },
  "extensionDependencies": [
    "samuelcolvin.jinjahtml",
    "ms-python.python"
  ],
  "dependencies": {
    "@vscode/extension-telemetry": "^0.8.3",
    "@vscode/vsce": "^2.20.1",
    "@vscode/webview-ui-toolkit": "^1.2.2",
    "dayjs": "^1.11.9",
    "inversify": "^6.0.1",
    "inversify-binding-decorators": "^4.0.0",
    "parse-diff": "^0.11.1",
    "python-bridge": "github:mdesmet/node-python-bridge#feat/detached",
    "reflect-metadata": "^0.1.13",
    "which": "^3.0.1",
    "yaml": "^2.3.1"
  },
  "lint-staged": {
    "*.ts": [
      "eslint src --ext ts --fix",
      "eslint --max-warnings=0"
    ],
    "*.{js,css,md,html,json}": "prettier --cache --write"
  }
}
