{
  "name": "vscode-dbt-power-user",
  "displayName": "Power User for dbt",
  "description": "a.k.a. dbt power user makes vscode work seamlessly with dbt™ core and dbt™ cloud: auto-complete, preview, column lineage, AI docs generation, health checks, cost estimation etc",
  "icon": "media/images/dbt.png",
  "publisher": "innoverio",
  "license": "MIT",
  "homepage": "https://www.altimate.ai/vscode",
  "repository": {
    "type": "git",
    "url": "https://github.com/AltimateAI/vscode-dbt-power-user.git"
  },
  "bugs": {
    "url": "https://github.com/AltimateAI/vscode-dbt-power-user/issues"
  },
  "version": "0.55.6",
  "engines": {
    "vscode": "^1.95.0"
  },
  "capabilities": {
    "hoverProvider": true
  },
  "categories": [
    "Other",
    "Programming Languages",
    "Snippets",
    "Data Science",
    "Formatters",
    "Testing"
  ],
  "keywords": [
    "dbt",
    "sql",
    "jinja-sql",
    "dbt power user"
  ],
  "activationEvents": [
    "workspaceContains:**/dbt_project.yml"
  ],
  "main": "./dist/extension",
  "contributes": {
    "languageModelTools": [
      {
        "name": "get_projects",
        "tags": [
          "datapilot",
          "dbt",
          "projects"
        ],
        "toolReferenceName": "getProjects",
        "displayName": "Get Projects",
        "modelDescription": "Returns a list of all available dbt project root paths. This must be called first to get the projectRoot parameter needed for all other tools.",
        "icon": "$(files)",
        "inputSchema": {}
      },
      {
        "name": "get_project_name",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getProjectName",
        "displayName": "Get Project Name",
        "modelDescription": "Get project name",
        "icon": "$(file-submodule)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_selected_target",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getSelectedTarget",
        "displayName": "Get Selected Target",
        "modelDescription": "Get selected target",
        "icon": "$(target)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_target_names",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getTargetNames",
        "displayName": "Get Target Names",
        "modelDescription": "Get target names",
        "icon": "$(list-unordered)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_target_path",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getTargetPath",
        "displayName": "Get Target Path",
        "modelDescription": "Get target path",
        "icon": "$(file-directory)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_package_install_path",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getPackageInstallPath",
        "displayName": "Get Package Install Path",
        "modelDescription": "Get package install path",
        "icon": "$(package)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_model_paths",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getModelPaths",
        "displayName": "Get Model Paths",
        "modelDescription": "Get model paths",
        "icon": "$(file-code)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_seed_paths",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getSeedPaths",
        "displayName": "Get Seed Paths",
        "modelDescription": "Get seed paths",
        "icon": "$(database)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_macro_paths",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getMacroPaths",
        "displayName": "Get Macro Paths",
        "modelDescription": "Get macro paths",
        "icon": "$(symbol-function)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_manifest_path",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getManifestPath",
        "displayName": "Get Manifest Path",
        "modelDescription": "Get manifest path",
        "icon": "$(file-binary)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_catalog_path",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getCatalogPath",
        "displayName": "Get Catalog Path",
        "modelDescription": "Get catalog path",
        "icon": "$(book)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_dbt_version",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getDbtVersion",
        "displayName": "Get dbt Version",
        "modelDescription": "Get dbt version",
        "icon": "$(versions)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_adapter_type",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getAdapterType",
        "displayName": "Get Adapter Type",
        "modelDescription": "Get adapter type",
        "icon": "$(plug)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_columns_of_model",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getColumnsOfModel",
        "displayName": "Get Columns Of Model",
        "modelDescription": "Returns the column names and data types for a specified dbt model. Use this to understand a model's schema before querying it.",
        "icon": "$(table)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "modelName"
          ]
        }
      },
      {
        "name": "get_columns_of_source",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getColumnsOfSource",
        "displayName": "Get Columns Of Source",
        "modelDescription": "Returns the column names and data types for a specified dbt source. Use this to understand a source's schema before querying it.",
        "icon": "$(database)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "sourceName": {
              "type": "string"
            },
            "tableName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "sourceName",
            "tableName"
          ]
        }
      },
      {
        "name": "get_column_values",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getColumnValues",
        "displayName": "Get Column Values",
        "modelDescription": "Returns the distinct values for a specified column in a model or source. Use this to understand the data distribution and possible values in a column.",
        "icon": "$(list-flat)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "column": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "model",
            "column"
          ]
        }
      },
      {
        "name": "compile_model",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "compileModel",
        "displayName": "Compile Model",
        "modelDescription": "Converts a dbt model's Jinja SQL into raw SQL. Use this to inspect the generated SQL before executing it. Note: This does not validate if the SQL will run successfully.",
        "icon": "$(file-code)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "modelName"
          ]
        }
      },
      {
        "name": "compile_query",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "compileQuery",
        "displayName": "Compile Query",
        "modelDescription": "Compile query, this will only convert the Jinja SQL to SQL, not determine if the SQL actually works. If the compilation succeeds, use the execute SQL and validate the data.",
        "icon": "$(file-code)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "query": {
              "type": "string"
            },
            "originalModelName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "query"
          ]
        }
      },
      {
        "name": "execute_sql",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "executeSql",
        "displayName": "Execute SQL",
        "modelDescription": "Executes SQL queries against the database, returning processed results immediately. Use this to test queries and retrieve data from the database.",
        "icon": "$(terminal)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "query": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "query",
            "modelName"
          ]
        }
      },
      {
        "name": "run_model",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "runModel",
        "displayName": "Run Model",
        "modelDescription": "Executes a dbt model in the database. Use + for plusOperatorLeft to include parent models, and + for plusOperatorRight to include child models in the run.",
        "icon": "$(run)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "plusOperatorLeft": {
              "type": "string",
              "enum": [
                "",
                "+"
              ]
            },
            "modelName": {
              "type": "string"
            },
            "plusOperatorRight": {
              "type": "string",
              "enum": [
                "",
                "+"
              ]
            }
          },
          "required": [
            "projectRoot",
            "plusOperatorLeft",
            "modelName",
            "plusOperatorRight"
          ]
        }
      },
      {
        "name": "build_model",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "buildModel",
        "displayName": "Build Model",
        "modelDescription": "Builds a dbt model in the database. Use + for plusOperatorLeft to include parent models, and + for plusOperatorRight to include child models in the build.",
        "icon": "$(tools)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "plusOperatorLeft": {
              "type": "string",
              "enum": [
                "",
                "+"
              ]
            },
            "modelName": {
              "type": "string"
            },
            "plusOperatorRight": {
              "type": "string",
              "enum": [
                "",
                "+"
              ]
            }
          },
          "required": [
            "projectRoot",
            "plusOperatorLeft",
            "modelName",
            "plusOperatorRight"
          ]
        }
      },
      {
        "name": "build_project",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "buildProject",
        "displayName": "Build Project",
        "modelDescription": "Builds the dbt project, this will run seeds, models and all related tests",
        "icon": "$(repo)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "run_test",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "runTest",
        "displayName": "Run Test",
        "modelDescription": "Run an indivdual test based on the test name in the dbt manifest.",
        "icon": "$(testing)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "testName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "testName"
          ]
        }
      },
      {
        "name": "run_model_test",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "runModelTest",
        "displayName": "Run Model Test",
        "modelDescription": "Run model tests, use this tool to run the existing tests defined for the dbt model",
        "icon": "$(testing)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "modelName"
          ]
        }
      },
      {
        "name": "add_dbt_packages",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "addDbtPackages",
        "displayName": "Add dbt Packages",
        "modelDescription": "Add dbt package(s) to the project, the dbt package string should be in the form of packageName@version",
        "icon": "$(package)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "packages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "projectRoot",
            "packages"
          ]
        }
      },
      {
        "name": "install_deps",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "installDeps",
        "displayName": "Install Deps",
        "modelDescription": "Install dbt package dependencies based on the dbt projects's packages.yml file",
        "icon": "$(package)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot"
          ]
        }
      },
      {
        "name": "get_children_models",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getChildrenModels",
        "displayName": "Get Children Models",
        "modelDescription": "Returns the list of models that depend on the specified model (its children). Use this to understand a model's downstream impact and lineage.",
        "icon": "$(arrow-down)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "table": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "table"
          ]
        }
      },
      {
        "name": "get_parent_models",
        "tags": [
          "datapilot",
          "dbt"
        ],
        "toolReferenceName": "getParentModels",
        "displayName": "Get Parent Models",
        "modelDescription": "Returns the list of models that the specified model depends on (its parents). Use this to understand a model's upstream dependencies and lineage.",
        "icon": "$(arrow-up)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectRoot": {
              "type": "string"
            },
            "table": {
              "type": "string"
            }
          },
          "required": [
            "projectRoot",
            "table"
          ]
        }
      }
    ],
    "chatParticipants": [
      {
        "id": "vscode-dbt-power-user.datapilot",
        "name": "datapilot",
        "fullName": "Data Pilot",
        "description": "Your AI assistant for data operations",
        "isSticky": true,
        "commands": [
          {
            "name": "list",
            "description": "List all available tools"
          }
        ]
      }
    ],
    "notebookRenderer": [
      {
        "id": "datapilot-notebook-perspective-renderer",
        "displayName": "Github Issues Notebook Renderer",
        "entrypoint": "./webview_panels/dist/assets/renderer.js",
        "mimeTypes": [
          "application/perspective-json"
        ]
      }
    ],
    "notebooks": [
      {
        "type": "datapilot-notebook",
        "displayName": "Datapilot Notebook",
        "selector": [
          {
            "filenamePattern": "*.notebook"
          }
        ]
      }
    ],
    "snippets": [
      {
        "language": "jinja-sql",
        "path": "./snippets/snippets_sql.json"
      },
      {
        "language": "jinja-yaml",
        "path": "./snippets/snippets_yaml.json"
      },
      {
        "language": "jinja-md",
        "path": "./snippets/snippets_markdown.json"
      }
    ],
    "configuration": [
      {
        "title": "Altimate AI",
        "properties": {
          "dbt.altimateAiKey": {
            "type": "string",
            "displayName": "Altimate AI API Key",
            "markdownDescription": "Needed for features that require backend support. Sign up for a free Altimate AI account [here](https://app.myaltimate.com/register). API Key can be copied from Altimate AI UI (navigate to Settings->API Key)"
          },
          "dbt.altimateUrl": {
            "type": "string",
            "displayName": "Altimate API endpoint",
            "description": "Select Altimate API endpoint",
            "enum": [
              "https://api.myaltimate.com",
              "https://api.getaltimate.com"
            ],
            "enumDescriptions": [
              "Community, Pro or Team Plan",
              "Enterprise Plan"
            ],
            "default": "https://api.myaltimate.com"
          },
          "dbt.altimateInstanceName": {
            "type": "string",
            "displayName": "Altimate AI Instance Name",
            "markdownDescription": "Needed for features that require backend support. Sign up for a free Altimate AI account [here](https://app.myaltimate.com/register). If your Altimate AI instance URL is https://betatest.app.myaltimate.com/, The instance name is betatest"
          },
          "dbt.onboardedMcpServer": {
            "type": "boolean",
            "description": "Flag to identify if onboarding is done for MCP server",
            "default": false
          },
          "dbt.enableMcpDataSourceQueryTools": {
            "type": "boolean",
            "description": "Enable data source query tools (EXECUTE_SQL_WITH_LIMIT and GET_COLUMN_VALUES)",
            "default": false
          },
          "dbt.enableNewLineagePanel": {
            "type": "boolean",
            "description": "Enable the new lineage panel in dbt."
          },
          "dbt.enableCollaboration": {
            "type": "boolean",
            "description": "Enable dbt docs collaboration.",
            "default": true
          },
          "dbt.disableQueryHistory": {
            "type": "boolean",
            "description": "Disable Query history and bookmarks",
            "default": false
          },
          "dbt.enableNotebooks": {
            "type": "boolean",
            "description": "Enable Datapilot notebooks feature",
            "default": true
          },
          "dbt.lineage.showSelectEdges": {
            "type": "boolean",
            "description": "Show select edges in lineage panel.",
            "default": true
          },
          "dbt.lineage.showNonSelectEdges": {
            "type": "boolean",
            "description": "Show non-select edges in lineage panel.",
            "default": false
          },
          "dbt.lineage.defaultExpansion": {
            "type": "number",
            "description": "By default how much lineage should expand.",
            "default": 1
          },
          "dbt.installDepsOnProjectInitialization": {
            "type": "boolean",
            "description": "Install dbt deps on project initialization",
            "default": true
          }
        }
      },
      {
        "title": "dbt Power User",
        "properties": {
          "dbt.unquotedCaseInsensitiveIdentifierRegex": {
            "type": "string",
            "markdownDescription": "Regex to identify unquoted identifiers. Example: `^([_A-Z]+[_A-Z0-9$]*)$`"
          },
          "dbt.dbtIntegration": {
            "type": "string",
            "enum": [
              "core",
              "cloud",
              "corecommand"
            ],
            "default": "core",
            "description": "Select dbt core or dbt cloud"
          },
          "dbt.dbtPythonPathOverride": {
            "type": "string",
            "description": "Path to a python executable or entrypoint. If undefined, we will use the Python extension's configured environment. Most users will not need to change this setting without specific reasoning such as custom wrappers and should instead modify the Python extensions selected interpreter."
          },
          "dbt.dbtCustomRunnerImport": {
            "type": "string",
            "description": "Python import string to import custom dbt runner. (Only supported for dbt core)",
            "default": "from dbt.cli.main import dbtRunner"
          },
          "dbt.allowListFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Define workspace-relative paths to include. Only projects within these folders will be built. If empty, no filtering is applied. The path should be relative to the workspace. Example: [folder1, folder2]"
          },
          "dbt.runModelCommandAdditionalParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Add additional params to the dbt run model command. Ex: --select model1 --target prod needs to be added as four different entries \n--select \nmodel1 \n--target \nprod "
          },
          "dbt.buildModelCommandAdditionalParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Add additional params to the dbt build model command. Ex: --select model1 --target prod needs to be added as four different entries \n--select \nmodel1 \n--target \nprod "
          },
          "dbt.queryLimit": {
            "type": "integer",
            "description": "The maximum number of rows the `Preview SQL Query` command returns.",
            "default": 500,
            "minimum": 1
          },
          "dbt.perspectiveTheme": {
            "type": "string",
            "description": "Theme for perspective viewer in query results panel",
            "default": "Vintage",
            "enum": [
              "Vintage",
              "Pro Light",
              "Pro Dark",
              "Vaporwave",
              "Solarized",
              "Solarized Dark",
              "Monokai"
            ]
          },
          "dbt.conversationsPollingInterval": {
            "type": "integer",
            "description": "Polling interval to fetch latest conversations (in seconds)",
            "default": 900,
            "minimum": 30
          },
          "dbt.queryTemplate": {
            "type": "string",
            "description": "Override the default query template that is used by the `Preview SQL Query` command. Use this if your database has special syntax to limit query results",
            "default": "select * from ({query}\n) as query limit {limit}"
          },
          "dbt.queryScale": {
            "type": "string",
            "description": "Override the default scale of the result table that is used by the `Preview SQL Query` command.",
            "default": 1
          },
          "dbt.fileNameTemplateGenerateModel": {
            "type": "string",
            "enum": [
              "{prefix}_{sourceName}_{tableName}",
              "{prefix}_{sourceName}__{tableName}",
              "{prefix}_{tableName}",
              "{tableName}"
            ],
            "default": "{prefix}_{sourceName}_{tableName}",
            "description": "Set the naming template that is used when generating a model from a source yml file."
          },
          "dbt.prefixGenerateModel": {
            "type": "string",
            "default": "base",
            "description": "Set the prefix that is used when generating a model from a source yml file."
          },
          "dbt.sqlFmtPath": {
            "type": "string",
            "description": "Path to `sqlfmt`. If not set, it will look on your PATH"
          },
          "dbt.sqlFmtAdditionalParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Add additional params to `sqlfmt`"
          },
          "dbt.deferConfigPerProject": {
            "type": "object",
            "description": "Run subset of models without building their parent models",
            "scope": "resource",
            "patternProperties": {
              ".*": {
                "type": "object",
                "properties": {
                  "deferToProduction": {
                    "type": "boolean",
                    "description": "Run subset of models without building their parent models",
                    "default": false
                  },
                  "manifestPathForDeferral": {
                    "type": "string",
                    "description": "Manifest path to defer the parent models",
                    "default": ""
                  },
                  "favorState": {
                    "type": "boolean",
                    "description": "If a given model exists in both the current environment and the defined defer state, turn this flag on to use the latter always",
                    "default": false
                  }
                }
              }
            }
          }
        }
      }
    ],
    "customEditors": [
      {
        "viewType": "dbtPowerUser.Mcp",
        "displayName": "MCP Walkthrough",
        "selector": [
          {
            "filenamePattern": "*.mcpwalkthrough"
          }
        ]
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "dbt_view",
          "title": "dbt Power User",
          "icon": "./media/images/dbt_icon.svg",
          "contextualTitle": "dbt Power User"
        },
        {
          "id": "datapilot_view",
          "title": "DataPilot Chat",
          "icon": "./media/images/altimate.svg",
          "contextualTitle": "Altimate Data pilot"
        }
      ],
      "panel": [
        {
          "id": "dbt_preview_results",
          "title": "Query Results",
          "icon": "./media/images/dbt_icon.svg"
        },
        {
          "id": "lineage_view",
          "title": "Lineage",
          "icon": "./media/images/dbt_icon.svg"
        },
        {
          "id": "docs_edit_view",
          "title": "Documentation Editor",
          "icon": "./media/images/dbt_icon.svg"
        },
        {
          "id": "insights_view",
          "title": "Actions",
          "icon": "./media/images/dbt_icon.svg"
        }
      ]
    },
    "views": {
      "dbt_view": [
        {
          "id": "model_test_treeview",
          "name": "Model Tests"
        },
        {
          "id": "parent_model_treeview",
          "name": "Parent Models"
        },
        {
          "id": "children_model_treeview",
          "name": "Children Models"
        },
        {
          "id": "documentation_treeview",
          "name": "Documentation"
        },
        {
          "id": "icon_actions_treeview",
          "name": "Project Actions ✨"
        }
      ],
      "dbt_preview_results": [
        {
          "id": "dbtPowerUser.PreviewResults",
          "name": "",
          "type": "webview"
        }
      ],
      "lineage_view": [
        {
          "id": "dbtPowerUser.Lineage",
          "name": "",
          "type": "webview"
        }
      ],
      "docs_edit_view": [
        {
          "id": "dbtPowerUser.DocsEdit",
          "name": "",
          "type": "webview"
        }
      ],
      "datapilot_view": [
        {
          "type": "webview",
          "id": "dbtPowerUser.datapilot-webview",
          "name": "",
          "icon": "./media/images/dbt_icon.svg"
        }
      ],
      "insights_view": [
        {
          "id": "dbtPowerUser.Insights",
          "name": "",
          "type": "webview"
        }
      ]
    },
    "commands": [
      {
        "command": "dbtPowerUser.collectQueryResultsDebugInfo",
        "title": "Query Results Debug Info",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.resolveConversation",
        "title": "Resolve",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.createConversation",
        "title": "Publish",
        "category": "dbt Power User",
        "enablement": "!commentIsEmpty"
      },
      {
        "command": "dbtPowerUser.viewInDbtDocs",
        "title": "View in dbt docs",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.copyDbtDocsLink",
        "title": "Copy link",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.viewInDocEditor",
        "title": "View in documentation editor",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.createSqlFile",
        "title": "Create Power User SQL file"
      },
      {
        "command": "dbtPowerUser.createDatapilotNotebook",
        "title": "Datapilot notebook",
        "enablement": "dbt.enableNotebooks == true"
      },
      {
        "command": "dbtPowerUser.datapilotProfileYourQuery",
        "title": "Profile your query",
        "icon": {
          "light": "./media/images/sql-action-light.svg",
          "dark": "./media/images/sql-action-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.replyToConversation",
        "title": "Reply",
        "enablement": "!commentIsEmpty",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.puQuickPick",
        "category": "dbt Power User",
        "title": "dbt Power User Quick Pick"
      },
      {
        "command": "dbtPowerUser.openInsights",
        "category": "dbt Power User",
        "title": "Open dbt Power User insights panel"
      },
      {
        "command": "dbtPowerUser.sqlQuickPick",
        "title": "SQL Actions",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/sql-action-light.svg",
          "dark": "./media/images/sql-action-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.runCurrentModel",
        "title": "Run dbt Model",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/run-light.svg",
          "dark": "./media/images/run-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.openDatapilotWithQuery",
        "title": "Start Chat",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.summarizeQuery",
        "title": "Explain",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.changeQuery",
        "title": "Change",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.translateQuery",
        "title": "Translate to other SQL dialect",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.sqlToModel",
        "title": "Convert to dbt Model (Preview feature)",
        "shortTitle": "Convert to dbt Model",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/preview-dbt-light.svg",
          "dark": "./media/images/preview-dbt-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.validateSql",
        "title": "Validate SQL",
        "category": "dbt Power User",
        "icon": "$(circuit-board)"
      },
      {
        "command": "dbtPowerUser.altimateScan",
        "title": "Project Healthcheck",
        "category": "dbt Power User",
        "icon": "$(circuit-board)"
      },
      {
        "command": "dbtPowerUser.clearAltimateScanResults",
        "category": "dbt Power User",
        "title": "Clear Health Check Results"
      },
      {
        "command": "dbtPowerUser.bigqueryCostEstimate",
        "category": "dbt Power User",
        "title": "Estimate cost for BigQuery"
      },
      {
        "command": "dbtPowerUser.compileCurrentModel",
        "title": "Compile dbt Model",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/build_light.svg",
          "dark": "./media/images/build_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.sqlPreview",
        "title": "Compiled dbt Preview",
        "category": "dbt Power User",
        "icon": "$(diff)"
      },
      {
        "command": "dbtPowerUser.runTest",
        "title": "Run Test",
        "category": "dbt Power User",
        "icon": "$(pass)"
      },
      {
        "command": "dbtPowerUser.testCurrentModel",
        "title": "Test dbt Model",
        "category": "dbt Power User",
        "icon": "$(pass)"
      },
      {
        "command": "dbtPowerUser.runChildrenModels",
        "title": "Run Downstream Models",
        "category": "dbt Power User",
        "icon": "$(run-below)"
      },
      {
        "command": "dbtPowerUser.runParentModels",
        "title": "Run Upstream Models",
        "category": "dbt Power User",
        "icon": "$(run-above)"
      },
      {
        "command": "dbtPowerUser.copyModelName",
        "title": "Copy model name to clipboard",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.showRunSQL",
        "title": "Open dbt target folder run SQL",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.generateSchemaYML",
        "title": "Generate Documentation YML",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.goToDocumentationEditor",
        "title": "Open Documentation Editor",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.generateDBTDocs",
        "title": "Run Dbt Docs Generate",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/run-light.svg",
          "dark": "./media/images/run-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.resetDatapilot",
        "title": "Start New Chat",
        "icon": "$(add)",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.maximizeDatapilot",
        "title": "Maximize",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/fullscreen-light.svg",
          "dark": "./media/images/fullscreen-dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.showHelpDatapilot",
        "title": "Help",
        "category": "dbt Power User",
        "icon": "$(question)"
      },
      {
        "command": "dbtPowerUser.showCompiledSQL",
        "title": "Open dbt target folder compiled SQL",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/file-code_light.svg",
          "dark": "./media/images/file-code_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.executeSQL",
        "title": "Execute dbt SQL",
        "category": "dbt Power User",
        "icon": "$(play)"
      },
      {
        "command": "dbtPowerUser.buildCurrentModel",
        "title": "Build dbt Model",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.buildChildrenModels",
        "title": "Build Downstream Models (model+)",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.buildParentModels",
        "title": "Build Upstream Models (+model)",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.buildChildrenParentModels",
        "title": "Build Upstream and Downstream Models (+model+)",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.buildCurrentProject",
        "title": "Build dbt Project",
        "category": "dbt Power User",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      },
      {
        "command": "dbtPowerUser.printEnvVars",
        "title": "Print environment variables",
        "category": "dbt Power User",
        "icon": "$(gist-secret)"
      },
      {
        "command": "dbtPowerUser.diagnostics",
        "title": "Collect diagnostics",
        "category": "dbt Power User",
        "icon": "$(debug-console)"
      },
      {
        "command": "dbtPowerUser.sqlLineage",
        "title": "Visualize SQL (Beta)",
        "category": "dbt Power User",
        "icon": "$(eye)"
      },
      {
        "command": "dbtPowerUser.showDocumentation",
        "title": "Show documentation",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.showDatapilotNotebooksQuickPick",
        "title": "Show Datapilot Notebooks Quick Pick",
        "category": "dbt Power User"
      },
      {
        "command": "dbtPowerUser.showNotebookProfileQuery",
        "title": "Profile this query",
        "group": "notebooks@1"
      },
      {
        "command": "dbtPowerUser.showNotebookTestSuggestions",
        "title": "Get test suggestions",
        "group": "notebooks@2"
      },
      {
        "command": "dbtPowerUser.showNotebookGenerateBaseModelSql",
        "title": "Generate dbt base model sql",
        "group": "notebooks@3"
      },
      {
        "command": "dbtPowerUser.showNotebookGenerateModelYaml",
        "title": "Generate dbt model yaml",
        "group": "notebooks@4"
      },
      {
        "command": "dbtPowerUser.showNotebookGenerateModelCTE",
        "title": "Generate dbt model CTE",
        "group": "notebooks@5"
      }
    ],
    "keybindings": [
      {
        "key": "Ctrl+Enter",
        "mac": "Cmd+Enter",
        "command": "dbtPowerUser.executeSQL",
        "when": "editorFocus && resourceLangId =~ /^sql$|^jinja-sql$/"
      },
      {
        "key": "Ctrl+'",
        "mac": "Cmd+'",
        "command": "dbtPowerUser.sqlPreview"
      }
    ],
    "menus": {
      "file/newFile": [
        {
          "command": "dbtPowerUser.createSqlFile"
        },
        {
          "command": "dbtPowerUser.createDatapilotNotebook",
          "when": "dbt.enableNotebooks == true",
          "group": "notebook"
        }
      ],
      "comments/commentThread/title": [
        {
          "command": "dbtPowerUser.viewInDocEditor",
          "group": "navigation",
          "when": "commentController == altimate-conversations && (commentThread =~ /saved/) && commentThread =~ /description/"
        },
        {
          "command": "dbtPowerUser.copyDbtDocsLink",
          "group": "navigation",
          "when": "commentController == altimate-conversations && (commentThread =~ /saved/)"
        },
        {
          "command": "dbtPowerUser.viewInDbtDocs",
          "group": "navigation",
          "when": "commentController == altimate-conversations && (commentThread =~ /saved/)"
        },
        {
          "command": "dbtPowerUser.resolveConversation",
          "group": "inline",
          "when": "commentController == altimate-conversations && !commentThreadIsEmpty && (commentThread =~ /saved/)"
        }
      ],
      "comments/commentThread/context": [
        {
          "command": "dbtPowerUser.createConversation",
          "group": "inline@1",
          "when": "commentController == altimate-conversations && commentThreadIsEmpty"
        },
        {
          "command": "dbtPowerUser.replyToConversation",
          "group": "inline",
          "when": "commentController == altimate-conversations && !commentThreadIsEmpty"
        }
      ],
      "dbtPowerUser.datapilotSubmenu": [
        {
          "command": "dbtPowerUser.openDatapilotWithQuery",
          "group": "datapilot@1"
        },
        {
          "command": "dbtPowerUser.summarizeQuery",
          "group": "datapilot@2"
        },
        {
          "command": "dbtPowerUser.changeQuery",
          "group": "datapilot@3"
        },
        {
          "command": "dbtPowerUser.translateQuery",
          "group": "datapilot@4"
        },
        {
          "command": "dbtPowerUser.sqlLineage",
          "group": "datapilot@5"
        },
        {
          "command": "dbtPowerUser.showNotebookProfileQuery",
          "group": "notebooks@1"
        },
        {
          "command": "dbtPowerUser.showNotebookTestSuggestions",
          "group": "notebooks@2"
        },
        {
          "command": "dbtPowerUser.showNotebookGenerateBaseModelSql",
          "group": "notebooks@3"
        },
        {
          "command": "dbtPowerUser.showNotebookGenerateModelYaml",
          "group": "notebooks@4"
        },
        {
          "command": "dbtPowerUser.showNotebookGenerateModelCTE",
          "group": "notebooks@5"
        }
      ],
      "editor/title": [
        {
          "command": "dbtPowerUser.executeSQL",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@1"
        },
        {
          "command": "dbtPowerUser.runCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@3"
        },
        {
          "command": "dbtPowerUser.testCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@4"
        },
        {
          "command": "dbtPowerUser.sqlPreview",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@5"
        },
        {
          "command": "dbtPowerUser.sqlQuickPick",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@1"
        },
        {
          "command": "dbtPowerUser.sqlToModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "navigation@6"
        }
      ],
      "editor/context": [
        {
          "submenu": "dbtPowerUser.datapilotSubmenu",
          "group": "datapilot@1",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "submenu": "dbtPowerUser.buildModel",
          "group": "dbt@5",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.showCompiledSQL",
          "group": "dbt@5",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.showRunSQL",
          "group": "dbt@6",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.goToDocumentationEditor",
          "group": "dbt@7",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.testCurrentModel",
          "group": "dbt@2",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.runCurrentModel",
          "group": "dbt@1",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.sqlToModel",
          "group": "dbt@3",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.compileCurrentModel",
          "group": "dbt@4",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.validateSql",
          "group": "dbt@4",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        },
        {
          "command": "dbtPowerUser.bigqueryCostEstimate",
          "group": "dbt@4",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/"
        }
      ],
      "editor/title/run": [
        {
          "command": "dbtPowerUser.buildCurrentProject",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.buildCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.buildChildrenModels",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.buildParentModels",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.buildChildrenParentModels",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.runCurrentModel",
          "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
          "group": "inline"
        }
      ],
      "view/title": [
        {
          "command": "dbtPowerUser.testCurrentModel",
          "when": "view == model_test_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.runChildrenModels",
          "when": "view == children_model_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.runParentModels",
          "when": "view == parent_model_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.generateDBTDocs",
          "when": "view == documentation_treeview",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.resetDatapilot",
          "when": "view == dbtPowerUser.datapilot-webview",
          "group": "navigation@1"
        },
        {
          "command": "dbtPowerUser.showHelpDatapilot",
          "when": "view == dbtPowerUser.datapilot-webview",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "dbtPowerUser.runTest",
          "when": "view == model_test_treeview && viewItem != source",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.runChildrenModels",
          "when": "view == children_model_treeview && viewItem != source",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.runParentModels",
          "when": "view == parent_model_treeview && viewItem != source",
          "group": "inline"
        },
        {
          "command": "dbtPowerUser.copyModelName",
          "when": "(view == parent_model_treeview || view ==  children_model_treeview || view == documentation_treeview) && viewItem != source",
          "group": "navigation"
        },
        {
          "command": "dbtPowerUser.goToDocumentationEditor",
          "when": "view == documentation_treeview",
          "group": "inline"
        }
      ]
    },
    "dbtPowerUser.buildModel": [
      {
        "command": "dbtPowerUser.buildCurrentModel",
        "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
        "group": "inline"
      },
      {
        "command": "dbtPowerUser.buildChildrenModels",
        "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
        "group": "inline"
      },
      {
        "command": "dbtPowerUser.buildParentModels",
        "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
        "group": "inline"
      },
      {
        "command": "dbtPowerUser.buildChildrenParentModels",
        "when": "resourceLangId =~ /^sql$|^jinja-sql$/",
        "group": "inline"
      }
    ],
    "submenus": [
      {
        "id": "dbtPowerUser.buildModel",
        "label": "Build dbt Model",
        "icon": {
          "light": "./media/images/build-model_light.svg",
          "dark": "./media/images/build-model_dark.svg"
        }
      },
      {
        "id": "dbtPowerUser.datapilotSubmenu",
        "label": "Datapilot"
      }
    ],
    "languages": [
      {
        "id": "jinja-sql",
        "icon": {
          "light": "./media/images/dbt_file_icon.svg",
          "dark": "./media/images/dbt_file_icon.svg"
        }
      }
    ],
    "walkthroughs": [
      {
        "id": "initialSetup",
        "title": "%walkthrough.initialSetup.title%",
        "description": "%walkthrough.initialSetup.description%",
        "steps": [
          {
            "id": "open",
            "title": "%walkthrough.initialSetup.steps.open.title%",
            "description": "%walkthrough.initialSetup.steps.open.description%",
            "when": "workspaceFolderCount == 0",
            "media": {
              "markdown": "media/loadDbtProject.md"
            }
          },
          {
            "id": "initialSupport",
            "title": "%walkthrough.initialSetup.steps.support.title%",
            "description": "%walkthrough.initialSetup.steps.support.description%",
            "media": {
              "markdown": "media/initialSetup.md"
            }
          },
          {
            "id": "updateExtension",
            "title": "%walkthrough.initialSetup.steps.updateExtension.title%",
            "description": "%walkthrough.initialSetup.steps.updateExtension.description%",
            "when": "dbtPowerUser.needsExtensionUpdate",
            "media": {
              "markdown": "media/updateExtension.md"
            },
            "completionEvents": [
              "onContext:dbtPowerUser.needsExtensionUpdate"
            ]
          },
          {
            "id": "selectInterpreter",
            "title": "%walkthrough.initialSetup.steps.selectInterpreter.title%",
            "description": "%walkthrough.initialSetup.steps.selectInterpreter.description%",
            "media": {
              "markdown": "media/selectInterpreter.md"
            },
            "completionEvents": [
              "onSettingChanged:python.setInterpreter"
            ]
          },
          {
            "id": "installDbtCore",
            "title": "%walkthrough.initialSetup.steps.installDbt.title%",
            "description": "%walkthrough.initialSetup.steps.installDbt.description%",
            "when": "dbtPowerUser.dbtIntegration === 'core' && !dbtPowerUser.dbtInstalled",
            "media": {
              "markdown": "media/installDbtCore.md"
            },
            "completionEvents": [
              "onContext:dbtPowerUser.dbtInstalled"
            ]
          },
          {
            "id": "installDbtCloud",
            "title": "%walkthrough.initialSetup.steps.installDbt.title%",
            "description": "%walkthrough.initialSetup.steps.installDbt.description%",
            "when": "dbtPowerUser.dbtIntegration === 'cloud' && !dbtPowerUser.dbtInstalled",
            "media": {
              "markdown": "media/installDbtCloud.md"
            },
            "completionEvents": [
              "onContext:dbtPowerUser.dbtInstalled"
            ]
          },
          {
            "id": "associateFileExts",
            "title": "%walkthrough.initialSetup.steps.associateFileExts.title%",
            "description": "%walkthrough.initialSetup.steps.associateFileExts.description%",
            "when": "dbtPowerUser.showFileAssociationStep",
            "media": {
              "markdown": "media/associateFileExts.md"
            },
            "completionEvents": [
              "onCommand:dbtPowerUser.checkDbtInstalled"
            ]
          },
          {
            "id": "pickProject",
            "title": "%walkthrough.initialSetup.steps.pickProject.title%",
            "description": "%walkthrough.initialSetup.steps.pickProject.description%",
            "when": "dbtPowerUser.dbtIntegration === 'core' && dbtPowerUser.projectCount > 1",
            "media": {
              "markdown": "media/pickProject.md"
            },
            "completionEvents": [
              "onContext:dbtPowerUser.walkthroughProjectSelected"
            ]
          },
          {
            "id": "installDeps",
            "title": "%walkthrough.initialSetup.steps.installDeps.title%",
            "description": "%walkthrough.initialSetup.steps.installDeps.description%",
            "when": "dbtPowerUser.dbtIntegration === 'core' && dbtPowerUser.walkthroughProjectSelected",
            "media": {
              "markdown": "media/installDeps.md"
            },
            "completionEvents": [
              "onCommand:dbtPowerUser.installDeps"
            ]
          },
          {
            "id": "validateProjectCore",
            "title": "%walkthrough.initialSetup.steps.validateProjectCore.title%",
            "description": "%walkthrough.initialSetup.steps.validateProjectCore.description%",
            "when": "dbtPowerUser.dbtIntegration === 'core' && dbtPowerUser.walkthroughProjectSelected",
            "media": {
              "markdown": "media/validateProjectCore.md"
            },
            "completionEvents": [
              "onCommand:dbtPowerUser.validateProjectCore"
            ]
          },
          {
            "id": "validateProjectCloud",
            "title": "%walkthrough.initialSetup.steps.validateProjectCloud.title%",
            "description": "%walkthrough.initialSetup.steps.validateProjectCloud.description%",
            "when": "dbtPowerUser.dbtIntegration === 'cloud' && dbtPowerUser.walkthroughProjectSelected",
            "media": {
              "markdown": "media/validateProjectCloud.md"
            },
            "completionEvents": [
              "onCommand:dbtPowerUser.validateProjectCloud"
            ]
          },
          {
            "id": "finish",
            "title": "%walkthrough.initialSetup.steps.finish.title%",
            "description": "%walkthrough.initialSetup.steps.finish.description%",
            "when": "dbtPowerUser.walkthroughProjectSelected",
            "media": {
              "markdown": "media/finish.md"
            }
          }
        ]
      },
      {
        "id": "tutorials",
        "title": "%walkthrough.tutorials.title%",
        "description": "%walkthrough.tutorials.description%",
        "steps": [
          {
            "id": "generate_models",
            "title": "%walkthrough.tutorials.steps.generate_models.title%",
            "description": "%walkthrough.tutorials.steps.generate_models.description%",
            "media": {
              "markdown": "media/generate_models.md"
            }
          },
          {
            "id": "autocompletion",
            "title": "%walkthrough.tutorials.steps.autocompletion.title%",
            "description": "%walkthrough.tutorials.steps.autocompletion.description%",
            "media": {
              "markdown": "media/autocompletion.md"
            }
          },
          {
            "id": "previews",
            "title": "%walkthrough.tutorials.steps.previews.title%",
            "description": "%walkthrough.tutorials.steps.previews.description%",
            "media": {
              "markdown": "media/previews.md"
            }
          },
          {
            "id": "dependants",
            "title": "%walkthrough.tutorials.steps.dependants.title%",
            "description": "%walkthrough.tutorials.steps.dependants.description%",
            "media": {
              "markdown": "media/dependants.md"
            }
          },
          {
            "id": "documentation",
            "title": "%walkthrough.tutorials.steps.documentation.title%",
            "description": "%walkthrough.tutorials.steps.documentation.description%",
            "media": {
              "markdown": "media/documentation.md"
            }
          },
          {
            "id": "lineage",
            "title": "%walkthrough.tutorials.steps.lineage.title%",
            "description": "%walkthrough.tutorials.steps.lineage.description%",
            "media": {
              "markdown": "media/lineage.md"
            }
          },
          {
            "id": "healthcheck",
            "title": "%walkthrough.tutorials.steps.healthcheck.title%",
            "description": "%walkthrough.tutorials.steps.healthcheck.description%",
            "media": {
              "markdown": "media/healthcheck.md"
            }
          }
        ]
      }
    ]
  },
  "scripts": {
    "postinstall": "node postInstall.js",
    "prepare": "husky",
    "vscode:prepublish": "npm run panel:webviews && npm run panel:lineage && webpack --mode production && node prepareBuild.js",
    "webpack": "npm run panel:webviews && webpack --mode development",
    "webpack-dev": "npm run panel:webviews && npm run panel:lineage && webpack --mode development --watch",
    "watch": "concurrently \"npm:watch --prefix ./webview_panels\" \"webpack --mode development --watch\"",
    "test-compile": "tsc -p ./",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "deploy-vscode": "vsce publish",
    "build-vsix": "vsce package",
    "deploy-openvsx": "ovsx publish",
    "panel:webviews": "npm run build --prefix ./webview_panels",
    "panel:lineage": "npm run build --prefix ./new_lineage_panel",
    "install:panels": "npm install --prefix ./new_lineage_panel && npm install --prefix ./webview_panels",
    "test": "jest",
    "test:unit": "jest",
    "test:coverage": "jest --coverage",
    "pretest": "npm run clean && npm run compile",
    "clean": "rimraf out coverage",
    "compile": "tsc -p ./"
  },
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@types/chai": "^4.3.9",
    "@types/glob": "^8.1.0",
    "@types/istanbul-lib-coverage": "^2.0.6",
    "@types/jest": "^29.5.0",
    "@types/node": "^20.14.11",
    "@types/vscode": "^1.95.0",
    "@types/which": "^3.0.4",
    "@types/ws": "^8.5.12",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/debugadapter": "^1.68.0",
    "@vscode/debugprotocol": "^1.68.0",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/zeromq": "^0.2.1",
    "chai": "^4.3.10",
    "concurrently": "^8.2.2",
    "copy-webpack-plugin": "^11.0.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-prettier": "^5.2.1",
    "file-loader": "^6.1.0",
    "glob": "^10.4.2",
    "glob-parent": "^6.0.2",
    "husky": "^9.1.4",
    "istanbul-lib-coverage": "^3.2.2",
    "istanbul-lib-instrument": "^6.0.3",
    "jest": "^29.5.0",
    "lint-staged": "^15.2.5",
    "ovsx": "^0.9.2",
    "prettier": "^3.3.3",
    "prettier-eslint": "^15.0.1",
    "prettier-plugin-organize-imports": "^3.2.4",
    "source-map-support": "^0.5.21",
    "terser-webpack-plugin": "^5.3.10",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.4",
    "ts-mockito": "^2.6.1",
    "ts-node": "^10.9.2",
    "typescript": "^4.9.5",
    "webpack": "^5.93.0",
    "webpack-cli": "^5.1.4",
    "webpack-shell-plugin-next": "^2.3.1"
  },
  "extensionDependencies": [
    "samuelcolvin.jinjahtml",
    "ms-python.python"
  ],
  "dependencies": {
    "@jupyterlab/coreutils": "^6.2.4",
    "@jupyterlab/nbformat": "^4.2.4",
    "@jupyterlab/services": "^6.6.7",
    "@modelcontextprotocol/sdk": "^1.7.0",
    "@nteract/messaging": "^7.0.20",
    "@types/express": "^5.0.0",
    "@vscode/chat-extension-utils": "^0.0.0-alpha.5",
    "@vscode/codicons": "^0.0.36",
    "@vscode/extension-telemetry": "0.9.6",
    "@vscode/vsce": "^2.31.1",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "dayjs": "^1.11.13",
    "express": "^5.0.1",
    "inversify": "^6.0.2",
    "inversify-binding-decorators": "^4.0.0",
    "node-abort-controller": "^3.1.1",
    "node-fetch": "^3.3.2",
    "parse-diff": "^0.11.1",
    "portfinder": "^1.0.34",
    "python-bridge": "github:mdesmet/node-python-bridge#feat/detached",
    "reflect-metadata": "^0.2.2",
    "semver": "^7.6.3",
    "which": "^4.0.0",
    "ws": "^8.18.0",
    "yaml": "^2.5.0",
    "zeromq": "^6.1.0",
    "zod-to-json-schema": "^3.24.3"
  },
  "lint-staged": {
    "**/webview_panels/**/*.{ts,tsx}": [
      "cross-env PRE_COMMIT=true npm run lint --fix --prefix webview_panels",
      "prettier -w"
    ],
    "*.ts": [
      "eslint src --ext ts --fix",
      "eslint --max-warnings=0"
    ],
    "*.{js,css,md,html,json}": "prettier --cache --write"
  }
}
